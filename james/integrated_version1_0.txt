// Options: Export entire program; Code Block delimiter instructions;
// Formatted Rung Comments; Element Documentation Database w/Flags;
// System Configuration; Memory Configuration/Devices with User Add-Ons only;
// use Element names (no NickNames); rung/address annotations;
// <SPACE> parameter delimiter; 
// Write/overwrite file C:\Users\gary_\Documents\plc_factory\james\integrated_version1_0.txt

PLC BX-DM1E-36ER3-D

// Do not modify SYS_CONFIG block!

#BEGIN SYS_CONFIG
0ac304e2e96cff56261fe6115a6fed82c0ceb863840dea8651c259afaf75f3d6b6eabbda42baa72d
fdcb68bbda2207d17e232cce087374fea78f3afc172e08a91ccd784700f5c628ffa0be65b3d90d62
d4ff7297adf5db4538d9152d27948fd9e164cf114f708606de4a733e3d8934a57eb70359651233cd
9ce255984eb47fe302d80a0bbc3d8414a09fa7d0f3589b379b5a05217b591788d7fc91f806770d70
74b931e9f7dde86adf28bbd400b1769f9e78d839c40d2f7156767ffa25af3f066ecf18578486fb81
1b94ee7429df1f7f912e90cad8613c16f932bd977d4d0a875be4e951d6739f6ffeb19bfc2f351178
85dad87f76aca05bf109c3ed85329de2517726b7756568224d0d4975ab1ae8fbcda8d16906ba9f99
fefba71f58769e9b9dcb0da44362991f7f0905e2daa472a77f40adc48b841ac27aac2b0fd3d77637
17016a2b094f7b58bd9e37e04f6f0cdef906eb5f55b8c94525e3ab11b4369b0f69388f523959acc6
65fe4e3eb18370a345888a93cea81739fe88dd351f6048254e516b028c548fc7bd87b2f76c07071e
4d956a0881dc52557f45f53fd1a836478f2f251c5608e002dce3955a8246d393969c1f153945f336
97ccceac4255a2bcbda916bcb1dbc9797a340f006029f6f993cd1dc2e70fc46881dd81a91414c3e5
74d8fa70a953031b06a9a93390c3f5ba0b34aa2eb8fefceb6e1a9262fb06b173e0c22f33540fab69
8a3ed77aa66c49e8e827b01d60e0d9f472e42c6d394108cde341ace5e3835dbfd8655f56da3ae88c
317dc081ecbe3862f33813928ecad222826d0de65a7dc763f9d86dd33b1875456e57ae1ce7ba630b
f095d87325cdc3e53e6e0eac90c585e535c0eaf037c014dc8522acbb826135825531287648b646f2
848732090c5a514451463c6b58d5077d90d76c73c1c2ed5a3e1985b73477dc9a2958ef1a898cc4da
44bfd4e711359f680b3d0aff16639b789255d237cd340a8f7f9acdfb2bca96f9452e7136799ef613
76cbd2d51c10b62e15be7ff2bdcbc16e2dea4bfa682d022f61d11099a2e744ba43cfb064745a87c3
d1f1d58fb3256007802f812c871f92e42c0736f18c43301a1ee60af98089e0ae4d321491a3147fc1
cb72e112fbe4671b567a61eead06ce1a2072c83508f06b5eeac711201c6d23068caa07ecf1c1c98b
a4128a7b2972c3eb8e43140e90552e85dcf7247abb7d9f1bc32f335ee5f07e08848899fed7f62a3e
41e76a792aefc9bae7244fa7bd75f99e73cf9d1c0a2edfbba68720a92c8854badf79c5c2a5e901db
bc75024e3b25a446dbb30fa467005627afb0c383e5f1c441eaf0694bf3bda25531fd9cca4ab1e54e
9d8fcfa79c216b8f437e614227e9c5cabf8a937cee0f30aec455e5925d850a31c44c24ff09ac84bf
a12d1b645fa2b456f2607f16f6c7418ccd20d9a5ccfde3cfc014c908bda9beca1edaceae63a19fa1
63f3067bcce90c9d1e2110cd7cf6cb1fffb064b05194bb8523f2bbb3a541d075450cb8f1de161cb4
a64152f34a241fdcd3fa726dc85375156d73ed04f36b8cb0d6fc171f9adb3753354486f6e4ccee84
5621a447d07d90a2b6ff7407484488ea2c6882439030d67be8786e22f6bd9452abecbc1d27760397
7d6baedd57898489060b57b9b7961eebafe953100fbac3c12c285c897e1677654ee8ba0118d6b993
788668969bdcca00afae1a133863c63bc9e93b798b672f17f63ca1b6b158ade5d193ea93d72be6e4
ca98728db6d89520524d0ea27f278e4dfe7220be36a3753b113f53db87ba69ce7e0098da6c37ee4c
215dab6f738214568e7331b73f37927861b9c87d12da9ae711d5c924b2f028d59711892ada786ef7
8e5f5e26df91d8a9f85205e286fc447bf262164298050feaaa076917c902f4ac262a8210dcb12c39
779f4ec71a468c03a06b24a9bf9eea1a089f456800474078f4519fc0203d3844e1a47f850f684ef1
316731c67f9e5d71da9e1b23eba1c984af0536480cba8a30d4d4bc68d2da1e7924593f785916c690
2f834ccb3f8600b5c735699655c21d066eb262bd0558a9ebebbba7018ae01f4311273124981b481b
00b0469eb71c663be6e1a7438aa3b92d2f7fdcf64f8cd34a36d0a7d8c37e57c85f8cfa48cdfe2d9b
6b443c92f28b44d7f8edafd6822f63501b99bcfc746b4767acda81ae92ad3c5d559210c32261088a
8d1b22d21dcd567cccba50654d7b13c1533304b3aad70aa32a59951639636aef92c7a64c3775e2e6
d38de6211e273d305eccac99263f31e940d9ea26c5c69c1590efbae30972ff6be1099996e5763379
b44ea3330eab544bbc73b0f0a5cc55647421ff08a4d6cc8190ed3ad35c6fec9573cbb550030768af
edcfe591b5822051046e2b7afcc977a68647b50db82c3cfec431d6739c2c2a45f211b68731dc5958
620e9c8eb574db4002500ef8bfc36c9f90a0008d390a61c89a9f94290413c392ee90bad9cb220547
a6f46744bbbe5075f9b7ffc49dbc5bebf21e2bb919e7d70af9887f9d3c9e362f24f14339674e326e
a3dd54b4574e6681ea2c5bcd2ed644dd04dbca8d9e0996a463a2e13da96f9dd720e0f0ceb85dff7b
ee65fd7a2d6e0ffb39ce63b23adac85c0cc95cf63cc0616218921768bdff155cd145cf57b56c008f
29887293025b6385ff41fb47a18fd7fe9a1052e73c7f34006175435f612651908de054ac4f158555
a5f0168d468a2821faab4c0a7a8cca47b7eed9f88b054437c5f948ca30b1eecf57ab47a983f897ff
27b2846127584ac379414143ff40b3a2a73bd71e51a1dce94070f03d87f351b6acba2545b9f26666
98c8eb6bfb092141b6ae932dc61f302663bbb379da4f42cee1df3994e0c59bb55a70379716e3dbe6
c50c98fc12473c42bdb95ed728f6244429c448c336a0f3d5cf62be2c9b6661e4b286ab864ff0b2f5
960ff06a6c16b24edc5c725293ff37899c37d51f3a6120f74ef568b766e5e97a3cf0135dbb168d83
f61a92d8426634cd0251dec6b95a8ed12b3f570d8d09b6247a3405f55c91169a14b54b816d26032f
f1508beed45476731745954ba41906dc2e5a9db5d8fbbf9d4043c00384816d1e3d490c63fef1b33f
df98337a885242120becdbf8edd9805e29a014ccc3bafeb03349a7c0cfc785842d3bfa1af6664666
c17f5f87585fca852c6f864fbb89ce60849ce8fe45766e52bd8e8e045181b20ca5a8693c18c32c23
a8d72a4f2677c3d47ca426d1f072e62857e3794f063fa164b11b86ccae707cff65106e9bc63f6649
f0594ad43bb5c533876b61c7db9426290ed6e57546da4068b0f0f9feeeef8fd38a11b110cff833cc
b7c0fd22d009e6e962ad4cd61f36bdc4179db1670b26a9301932981ca68cd0cffa372cc53515cfe3
4777713754e3f3215770ab719e233833fb9334c36f38ec63706bfbe405a437357d366eecf103b21c
2eb0997ef12fb8c84f8e30598282d27f8dde64c6acec09f9d543c31d1a283afeab2d44288f43c0e8
0b42cebfea23080d6faf148cdb3ef5e89b6c9eb480ae2ed16f2ec4186bdd9418b56d84ad302fbb7b
88c74541f5b5321b42cb58172d0a005e8a46e865dcd8d687adead4b318d3b9fff626097e774d5564
7d53afd9304d7055c6e5f70eae2a81d647ea2d1c04ae3255c579f2ac8267c13447f2cecae155bf0c
95d07d9a1ffbbdec30a4b778b199946551b198a33dd077bae5f8c3fc56c58baed7f0c577bc6a0e8e
5404c1b6cb8717a5f4ab833cfd692f4c029cf3310d654cce04a717e211bf66f233c4703de8a7eec9
eb9643b0c8b8a95b302a9956fce013e5037e4366cdee64d0a5ecd285f45295a47cdf770d3b6d00e8
879131c4b7625c765de903b089cc9998757b64ec3f45e52213cb6c44e48efdbccc927a3be4f67249
80bb9780ed578e9caafea18916c3b41fd8e9f15dc1cc0fc63e441a969a904f4ef738607a82272e73
f9ba295c15b7a1cbad3fcc16bdf684ba1489cff9d66222a5bce5449a00f7ede6181f2e379967cd72
5c14427526a511642dd38504fac2aaab0503b4deadecfe709cdcd7b6a6b31ee425e196eb8fdc5b39
332c548374de192830940800902ca7f779ed4cb9ca9fa7b9f0e2e2b70441cc4254b7607349aa556d
0504afe99ba50b96c0f6ee5f7a5a33b547f632f502b6331bfea2fdf3eb519325e29f097834bcd63d
e09cfdaee78c208833d974b878637e03b2aa428a73d92a04db33a152cedcd4c5c87ead55bd024cd5
794145fb4dbb3447c00bffbf5b995f8c76b427cc477004eb095fbefe5f55bb222d46f9ac374c0840
5053379e95e624e30575983f9f94533b9c6ba76767beb9f36123dbd38cf7b6c6983dd8cd39338b24
cffea47018e07621e5bcc88f619dd851cd2830c0a44593f532d136809121276f1dfa59d436862734
a0f352c1cc0d99101ea8d7ec9857bec62c0f391797e832c0e06437e2f50ec9fc248242b44d313f56
bb5cd2c37375857594e0cca4f205564115b427aa40bc7d7d9ed5d9bedfab82c26fe4008f5002d551
a6d1a22bd03c9e0f4cbbd881558d3d28f0e5339d4a9790233c65248eace6a8477d274978d2803dca
d57523beae0847b5fc739ab462cc5977c74cf145ab44673e6986556382854c9edd75715b1141626b
8acf4ffbd312ffebb9e29c6367800f7258fadfa2b645c04988f9d93a8b2b6b9ab2e48c3bc01a420a
4042669670c9d71e7c5598e57c778a1b7b04f5eea58cec2409f87ae4aabfce66d51949a2d17fa076
55eeffae4f25f1d72f06a6a1bffd41cafc9c5ba7fb3ed70f0a6dd9048bd1699bdbb210baf912abe9
5d9e69faeee321d8dc4832a29433731ab8d21f291553dec3a37893b0ddb3b9f991ea9b425040f98e
9929e61a4c49cc1fe6e864da9447c6fa60550031b357d631d6601ef5ac62f51d78c00d0b27ab85e4
d633d201eaffbc613b3b9a9ef8b60dd14c19b4aff164a3ee89d45e4a09d41e62b503875f1a5b4160
a9bc88d0bb7d94478c99da075d5dfc98a6104fa79d49f4951ae696df84d95d54f8ec1019b966a254
102e6b4b00cb03b29ee7400421bfcda8cf8db51820f6e6a78b9e142dc251d8584800897b7280dab3
9bbbd7b5e4ea2493b63e3b5a96e4a433421e9e3854cacd7077e10bd1a309144d74720d6e04c70a28
c48193650f71a4ef827dacedc9948b78ff41f9eb95f4186e2b70288244060531ba8553371762b48e
2f5dd58ad9be6ced350046f6c7c2b4f2b9ceeff11c03cda1d33e02c4eaa6f30d0af427d286dc9ec5
de0b7327625d3ede4a3a10184e556e17522b7e2faa05ecbeb35113d8465c9693518677607b68615e
ad902e8a3775eaf0eb6442e6a9d971a99a25507f44eb641dc26d9e2e7c876ac7e493aa6048c6a3da
c00325fb4b5eca42848317fa66577ef3de91e910c27194542328d110156c708713fcd91b61bc4dc7
0fb9bdd2e4a4d98167933c11086c104b73ed7a2946b4fa95a4a1d518ba39192e90b49ed7341d3ef7
d6b3f0347d437af00045e5eeb4d51c4836fd6fb6d7c1f53540806d647ce94dc92b7ed2a9008a5746
d88f5f8d994b9874d8057496f9b983a94101b89296ac6b6118762620a3dc1f80b2b9b6283d91422a
ab2040925e0150e454859420cc5b3609b3587e5b5f4959a3e0b1d2d83e359fd8b84b517cfc47053c
f115e20d7308fc6195a4b88b0bf95791795f93d3338e8984f124fa5289dddb78b3556762bf54f2cd
f299e5722ff4ade87f51315e4274aaeb2cbece92e59909df4d0642469cbf0b0acb97b7f41a8a3df3
948cbf00512bcd05906da7f735bc9c329cca9708f1b5856ea180cd5a5676928a041f1d1d5689dd51
2efab0c363e5f60b7969ededce17166f16fb2c023f21ca66e11b8b8f9b9e78a83dfb3e3d43d1d057
995c67aebab915dad500643eed81a5ab355206ba7a16442688a8f971ed42163d1a1a5f8e63a7a792
89fe0c556b6b064b33fcb2deb1d0d4730577e71930e0933fca10ae6a39c78ebc3f6c26c13087b8d4
44780041845e9cfb9ca7f66ee6cc6cda7349a0b729dd211ce7a496f258938d5356db0c8d09e7627d
520f8c0c6fb7b621ec029617c61ff27b964101241c49243bc052c2a282ee0e1264019b23c3777a54
ecf0f9c2bb0a18e746014da51b6f31b9f60253a2e494fb26612990aa42ec34ebb24b692d2a3cf652
885bed759bb7a28bdd1cfcb0eeec815dc852732588107fcab23f297758435dfa14207bb1eac0f4a9
1021876d83132883c5539bf62712411af2782aa9d17c7998bbb17b82a255984348c3ce239028637b
d330035cdeaf86019457a871db094ffba04fe629f550b72a0f4cf4e8546545c17979c5fe7a43f5fa
3e8682ac1fdf87587f3225646a8354b6c928312ae77e424a39ec85fbaab1aa0778f6facaad64a262
c61cc4e1e6ec9278a9369e0dd35c26a670f933cbdad5973aafb5091ad437759831cefda7e87d41a0
f03339c0ecfdf23642576206ec63d3b2243ab2050f640b807ce222360c1610248c417a81c54aa2eb
b15043c9829bfdebdc036b190e4a44d0b5cb2a707c85042f9a214bad5668b6bddb14a0178c316eeb
1b96d63c10b79bea2687deb9cdec934fb4aae9fbf7c4ab0bf241b48991a61488e66fd10353ca5c6e
05f2185ec5f1e8a8efd9b26343531b8819e6f3c7038b8782fe951c7cac567ae94339fe314220c525
bcbbfa66b8c02aa5f5eef5f8a4b0f43aa6d761880545e965bd33480873e83216eaecdf6b1a5f7a97
192bf8479676a75e4415d0c0fa997cbef499fd13eba6e955663420b64ebc76a80ea66953368abc92
efc2af3d90f16bfbd943deef61de8ed18c4eacdc230d94ee3ff08193c92df025c6a193eafca420df
59410faa5f5110ba7c12155012401e68472b20a41d3289a5c66206a0948e3e95982002cefd532fb3
3beed04eebdb284694d1acd35f71b3b1831ea9c29e72da49b0ac6349125a563f92f6f9a129f35546
37fa94234a631e5b6c7c7e4c9e113f785e195911fffd3881deed2770bcad906d23cb611ddb957be2
0f0227cb36107a4047e04108b4cc9b669e54a30f828a4848c5d7d41ff60b5b6fe34a5f6e4e58bc7c
f5977c492417b93c4d45b5fd47fa85da13a9f0bd035e5a86a093b7cf00e1b861cd29fc6a812c6fae
89d651125cd49fb67577493d7cbdd4e75a25c45d7598f0db53a995f74badd56ec04c7c27fa587b9c
c543679eb0fbd843607e1a15f32c895c413939a749c8715e101e1ae0e40778a5eb1db49202657328
ed28030b7b424978c73f93776cde00a4dffbfd8eff73117847a03201d2c02ccd02f916054702803e
5af4639b7c40c8506a4702b7e6ab8fc73d29cc3f65953a78eb40bd8806caf42f8840ddbc3019aefe
afb5bd561051f60cbb8a3c43a3e1ef1671659f8a9475f47f2f2a6b4b530c912de3c0c63acc58bf87
7dfacaeaa44dc965f283b67b1760ab70f2a2f7acbc63de546fd9a36939580d3ba3025d1816b3fe2e
cd7c861154cd07a47e8b0ccd2714e32438f5f8315722d268d433de73cf37ba7763c3fd96078e2851
a11fff03b008a37e8b8c940334c4e58250287adf2530a3493f6415f6760743573b5d553b7587a9d0
6a8cbd963024dacfc2f1fa267f3a3da1e4343fc8209341654ea095081fb2a69e4d3d01e2580a1ffd
d071a6ad0e2b82c10a3c3540073a7aad98ae7b39d6b8eacd48739674684eb0c35c404c4837b21696
493d60fd68a42c6f19a876adcb1793705af9027ce935dd4757841823c8376f674e674df3610c9478
9ebdd60ae309096ec17d65d6bb4b4ff309e0402d6b7dfd59a3dc16692668c72ad62f0ecd870984d5
5f43541d1cc7a7c8e22fc4448d56b6c1d6090913224065392aec2d8167bd9c3906461959fc0ed28e
86678510dd5587f3d4f08ebaf5b19dbff2de1f956909745e134dccccf850f074b24b3099d7ed8bc6
b48a0c98894dd88b6df5a96a6c7ac09208771496a242dac88ade8beb58f2d10cc2190ff616254676
a55522c9ba9c7110f1126de27ebc385072002e94fd77864f1f676c18bd430bff37034bf7d12c9caa
0d5f57b14aa4176dbad4dc5d3fa22d878ed6759103813c5f4566a57ca74aa9decefc618e5c24d091
1eab127eb421317299f8b8f27240de8e8ff604a8eb23c19d278a622dbb26fe739e8e263274529119
e418a8bdc47debe39babf43229f893521c65f19678352dbe505ff48f62f508d1e9f654746dc1b286
b06d88e4611e8b7be75c1d05c135dd6404515e660c267ced2458724a424bc7ae3cf72bc3a248225c
8e6a429238baca29f7b0f1604db4b70512bebbc41ea0d080af1a74cd6520bca1c2e7c1c6202c25fc
f7eec62816deb2d807a5f1f2b061a8fb531f168dfd77186fdc8c6744345a3ec2be8507a7f4b91414
ab5f36ae4ca0a997e0c65e2cc7cf7a4fd7db7803cf799ec5743f5c2c11c28f0283f5f1218fd8caa1
70bb378f9e0ff8f4b1cf51a4ab418324f1af71be7dee376892df7cec0658d5ce7aeaee8cfd84d9ce
76e2a9061c805c4fedc0315bc1e24ff186a80fcccc16fd1bec77554f8c43734a0e773acd33049846
1d467e341040d4feb80658d791a7d633f94e01aeb4a9f97a13dde7038318c7b7d5d180e69b314f98
07cb966050aba855413f002fefa0a5c04ecd7d8542505d030a411083db0bc9ec9ee5030c81280635
88d6021db6d14322cd0defca3870bb958c0992a6338a1857b29026d49e10d66c02e815df46aca752
5862b8a549b0f62623d13cdd3b8684a4e4a7c0b3525ef78e33a6378bc28031635b8e1852cf1ac8d9
1b212842ab9fcbd1383f7b40bda98d01a55df51a00aa0fdebf16c629728fbcc38be76d8c5ea0d704
ff2c04ccf512a1ad1d0a13e55de4765cedc8c62bdd8ad0d138be91b739a5061c7a7f96535bb56864
1eab995411f808763c00861a9fc46732055a42b136a72ee0e197a50716480a088d111484b801ebd4
f037ce1cc8fcc05b4841205234a4574e642c9bc966962a465ff90b0a1dc9b284ee638701c1e9f76a
784662fb348aa5840c220dfdb7f1296aec80e50045a712c09d3e5507678742651db6b95974622082
7097dea447863dbbc3539c33571397032adb5da3889d28edca1a0c982acf63113ef7b084993f361f
d96773b3e62b0ac4e09dba082619ffd8a88c92c016f71993f59ec893758c7e06536403aae1c45e7d
44dd6c48d42d6d9c5b6adbe826ed52c1bdbf2739ddef368a7377546b54bb1dc678ac0d599884223f
f7b6b45288ff06e9addf9d22f2e5d3d54b26dcbe7b1d64a6f288c43897e3139446e016cbcff7e635
c9a08a8b6733ed686f29081409dfacde21e805fefbae0cf5807bb798659a3196a4dcbe8f1cd858d6
8a7706b74b7b9071ec6ced38b375519487e6d6559db5126c9d870fc1835fd4ca76aba4e4becdc8be
10f7a01ada8dc89b9012db4eeea6b77f24afe2dbe7014ace83cdc11800324138ed71d384edcfac66
9e9a246b6ac4413f5eba341dcdf963578f2a54fa877544bf8ad8bc07529e566e828af708413c9ec1
cceacf89d9fdea155bdfbc3bbf5f07d568fd07d9e472d5288f9288a438435c14b9d34c470712466d
1a2584e02d3cc7faf34fdd9da332d04c8413b4f11eafeee66b03c66a2ca62b2174ad5b40e6b96950
e4495fc4ca77bdc3790441a3a11f7d9aae33e17579dfc821d05416fe40f54857a69f35848fb3211e
9d6bb2416fd10e21c73bdc15929f00abd732eb1df8b27dacc2ba59ccab2f0b0def0403cde0e1f544
8e30a17d5bf6268963b4e8c098f6b34ec17fd544b9c6fc7619ac506c30c1553f9ad89ce0d876e187
fb6d69feeeb2a2dbbf8b46257f03c484428152bd205a14e7bd1927022b003e77747d06b5e358eaf4
d658c42b441e2bf78ceee0c10fa46c571aa907be73b70a74d46f02a5d0b42cfc881fef630295deb6
847f961557ceeccb67c4bbcde088039aa9fb7a36e6585d8f15a1ff184abea38b82f4cf1285554acc
1a1baaa2eb713955caf31ca8a82d4ce66b2593bd7cb5d452e90ad38bf1b349f66abb3671606292fe
cfcb858e2e6a8732c0bb68ee74f34cecc735b57623954e03a514d37a6ed814eb80f42486a460c285
9613f3d1b4e9a14ca9127f544d34b9c0c5486d16c8191afa819e43c45f03b1d92e9271466b2c59b2
9dc0ac218e6c645f4816c8d1a5e341cc6ff133fe30273acb73adad456860a07e0bd7250a0d19281b
001398f035f9c3fb8f4f6baced4ff78b70ae1de4589d89cd21ec14017671b70674a6383d62f2be5e
1f19c402ac5256808bab845af61ab59c424feb6554c01ba7d8b2d9ca0bfcbc003d801bb9791e987c
fe5f26e7cdde0236a1ff3e29b61da4140b1bbbfc580453c7deb4f068b27884a426edd312bbc3a415
6b11c2e24579fcb67421f47eba3cd162624f552125e8f64e30269c131364f3cdf9a5bb6611acf038
7b8167e9826e3a8c13ce754d29629217c8598f90814962c41de88b0a492743751d347127a3757309
ea6011887d8212dc4a2e76f17676537b35aef0a7295653af1df085b6aa475d6d2a739877bc1ff658
a44e2baf20286f5a281fa17df563705b9e2baef6544d670a8ec789d2ce6364d0e472661b1aba466c
595a6868e4c9a112bb678df4b7c8c3f0ceb93ea053e429e42bb3a455f78902c0cd3b33d078c93d0f
2d94727581e4fc4cb92d1b89fb2b8f5366f8eb36fc915033e0ece3ecc51fa6e8d3906f6966d33a55
c433cd8c389cd083a64ec594e5789e4872f140e018a089194ba7f98b5854cc6e47f4e8976701a660
445c6072bb6d99c305b2778999923e1f32c1f097b9c2edfe6b706a146e1fe97653e324f46a1926d7
6197904ebf924eaa9fdfe0200f11e0c5a28f334226e3add436c246aeab4f62639a68a3a53ed416d9
e0d1007c805e8ddabcd20b8cd84168c0b937c000f028f5f5ef86a263b4a6becd9f3d6ed6acc6b061
b6748777dfdadc90b9bf31e59a17912ad4367d243726464393afdc7fa4d9c01dfe6736aabf4b2a84
de3361ea7bb2e68aef58f4adf99229df900d617e344495d050d95b5f833215cf9a3c72ef693f157f
092b815c2434ea9c5a8cbc9dc402fe2b26ec76887591a46736b48bab723fd0759da41f89e1ca6026
e3bc61fdfc8bf7075cee2ddaa396776f481cd0175916fd0b073c673841fa404911ba644c0aa87ccd
621cff907695e4b5ef00c0ed178370db5de8117d940497c36f0080ece74edde4b63c037fa92e6865
695523b5a1a17d2ea89a9af70888b9dda6fbe44b311ed7792a4105e9c0818fa983ead4276a8f390a
106adc45e5daf0d905fd9d735c9b5fc8c9ad3c78056fed87478e6633182887f34e5a5853e0193ccf
fdf18bf77ae14c2e80a912f30ebb5728797e9776bcdbe50a300d967c2529213b89fd3c4374a9f440
d74ea01c619695cc37eef7f283e64a07e8e80697cc166f45ec9994423976218d4a14ffd0e118f5c1
be098f0d072f3918af3eb0c0e85db9bfd2841e7e0daeb43e3c7f5d5051a6ae7cf2d544ffbd5d658f
5c146fb66e70f0365bf548b7a315203621c627eea01124a5a19089f888456683f67d4acca2fa3428
7da6542347a14d1e622c6ceb47b2c774640b9c40914fbb2643fbc8d839c2a9de33e61ad6c70581c1
729ddb85ca5f55dd052828417cf5d9de9f3796edd8cccd15f7b7f25bcf0cc9d44a80334d9b08ea2e
c1e18b97234c0f6e743aa49310c2a1a03cd41c90506033f0984476df718cc58b2f8c354b515a1e00
eefe17ec4273e608353a3d723e4ea4bcf924931e6c92ad0e1d22fccfc758c469048362df5929158e
6fe99bc1beacbf8069599cec6d3d21f8ccd65babf3e0bb2ee375ae13ee0f3888efad24606f351cd0
f5864ea7453204ea0fc6d4345e2c4fa5fabd9708f9482911fa3f39157f5876399580296944a28488
2df3e51ad522d2c0e25a555241e76f29f03b74877574d4fe66eade41ee4ad6e0fe9bdc5cfa8a679f
59acf535057abf7c59303001fb01dd37489d1c20e86a33077e6771cbfd00f1ca7e9c02b3c91b22e0
2c9239d22e8e1cdbcf3fec1b52ab777886653c0633e76e3d1062285e1c83c2bf1e325867265e8b5e
2c93c4b13086f888200c12787e490907e2dd527f02d9674192f17a7c7ff9f49742cfa53a5367f7fb
403cc139e2b0feeb662b3699df8219cdd153520a87968bc8fff40d41402df461141285c29f5d8d69
2aa3e8204760930923b630b87b5da106100a8466790fbb2cb17d8ff7dabea91a412e7f1bb332064a
720278333679c09d17e84184fd572f6b79c31a5a404a8e69fddcc5a257a405108bf816274e74a2c5
739b7af9889a23eb21a4c60abaa186fccfd050a889dff0451b26d0aeb1325c51125305a00cd11ac4
6289c390bd72a9bdcd9d816e67e97ead5286413e140e8026cb777221a3c3ff958d18477e4f491ee2
27d8d684bbcd2ad46fc795196a27410711873d9e0b2ad3dd57067b9df8d036a1c82c1c83b103d5b8
6c0a3f2dd8392cd86dbbbcaa87e6f010259ad66d357a94b506e84ee3a7b35313e1fbe68d
#END



#BEGIN MEM_CONFIG
 HBW_Program PROGRAM  0 -1
 VGR_Program PROGRAM  0 -1
 VGR_Copy_State <Virtual>  0
 VGR_Suction <Virtual>  0
 MPO_Program PROGRAM  0 -1
 MPO_Suction <Virtual>  0
 MPO_Copy_State <Virtual>  0
 SLD_Program PROGRAM  0 -1
 SLD_Copy_State <Virtual>  0
 SLD_Suction <Virtual>  0
 SSC_Program PROGRAM  0 -1
 SSC_Copy_State <Virtual>  0
 HBW_Pick TASK  0 -1
 HBW_Copy_State <Virtual>  0
 PID_10 PID  0
 PID_11 PID  0
#END

// Beginning of Code Block VGR_Copy_State
$LGCMOD VGR_Copy_State

// Rung VGR_Copy_State#1
// Offset 0
#BEGIN FMT_COMMENT 
"VGR Program"
#END

STR ST1
COPY 0x1 "4 0x0 MC410 C410 1 0x0 MC409 C409 1 0x0 MC412 Y28 1 0x0 MC412 MC450 1 0x0 MC411 C411 1 0x0 MC408 C408 1 0x0 MC406 C406 1 0x0 MC407 C407 1 0x0 MC413 Y29 1 0x0 MC413 MC451 1 0x0 X27 MI200 1 0x0 X26 MI454 1 0x0 X25 MI453 1"

// Rung VGR_Copy_State#2
// Offset 31
RET

// End of Code Block VGR_Copy_State
$LGCEND VGR_Copy_State

// Beginning of Code Block VGR_Suction
$LGCMOD VGR_Suction

// Rung VGR_Suction#1
// Offset 0
NOP

// Rung VGR_Suction#2
// Offset 1
RET

// End of Code Block VGR_Suction
$LGCEND VGR_Suction

// Beginning of Code Block MPO_Suction
$LGCMOD MPO_Suction

// Rung MPO_Suction#1
// Offset 0
NOP

// Rung MPO_Suction#2
// Offset 1
RET

// End of Code Block MPO_Suction
$LGCEND MPO_Suction

// Beginning of Code Block MPO_Copy_State
$LGCMOD MPO_Copy_State

// Rung MPO_Copy_State#1
// Offset 0
NOP

// Rung MPO_Copy_State#2
// Offset 1
RET

// End of Code Block MPO_Copy_State
$LGCEND MPO_Copy_State

// Beginning of Code Block SLD_Copy_State
$LGCMOD SLD_Copy_State

// Rung SLD_Copy_State#1
// Offset 0
STR ST1
COPY 0x1 "4 0x0 MC800 C1616 1 0x0 MC801 C1617 1 0x0 MC802 C1618 1 0x0 MC803 C1619 1 0x0 MC804 C1620 1 0x0 Y31 MI800 1 0x0 MC851 C1626 1 0x0 MC111 C1666 1 0x0 MC5 C1621 1"

// Rung SLD_Copy_State#2
// Offset 23
RET

// End of Code Block SLD_Copy_State
$LGCEND SLD_Copy_State

// Beginning of Code Block SLD_Suction
$LGCMOD SLD_Suction

// Rung SLD_Suction#1
// Offset 0
NOP

// Rung SLD_Suction#2
// Offset 1
RET

// End of Code Block SLD_Suction
$LGCEND SLD_Suction

// Beginning of Code Block SSC_Copy_State
$LGCMOD SSC_Copy_State

// Rung SSC_Copy_State#1
// Offset 0
NOP

// Rung SSC_Copy_State#2
// Offset 1
RET

// End of Code Block SSC_Copy_State
$LGCEND SSC_Copy_State

// Beginning of Code Block HBW_Copy_State
$LGCMOD HBW_Copy_State

// Rung HBW_Copy_State#1
// Offset 0
COPY 0x1 "4 0x0 X0 MI200 1 0x0 X1 MI201 1 0x0 X2 MI202 1 0x0 X3 MI203 1 0x0 X4 MI204 1 0x0 X10 MI210 1 0x0 X11 MI211 1 0x0 MC5 C5 1 0x0 MC6 C6 1 0x0 MC7 C7 1 0x0 MC110 C110 1 0x0 MC111 C111 1 0x0 MC112 C112 1 0x0 MC113 C113 1 0x0 MC114 C114 1 0x0 MC115 C115 1 0x0 MC116 C116 1 0x0 MC117 C117 1"

// Rung HBW_Copy_State#2
// Offset 40
RET

// End of Code Block HBW_Copy_State
$LGCEND HBW_Copy_State

// Beginning of Code Block $Main
$PRGRM $Main

// Rung $Main#1
// Offset 0
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2022 Project For CS 404/504, ME404/504 "
"PLC Programming for Automation<br>Date 10/19/22"
#END

STR ST1
CALL HBW_Copy_State 0x1 DST511 "3" "3"

// Rung $Main#2
// Offset 8
#BEGIN FMT_COMMENT 
"Mini Factory Fall 2022 Project For CS 404/504, ME404/504 "
"PLC Programming for Automation<br>Date 10/19/22"
#END

STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung $Main#3
// Offset 16
#BEGIN FMT_COMMENT 
"Run HBW_Program"
#END

STR ST1
RUN HBW_Program

// Rung $Main#4
// Offset 19
#BEGIN FMT_COMMENT 
"Run VGR_Program"
#END

STR ST1
RUN VGR_Program

// Rung $Main#5
// Offset 22
#BEGIN FMT_COMMENT 
"Run MPO_Program"
#END

STR ST1
RUN MPO_Program

// Rung $Main#6
// Offset 25
#BEGIN FMT_COMMENT 
"Run SSC_Program"
#END

STR ST1
RUN SSC_Program

// Rung $Main#7
// Offset 28
#BEGIN FMT_COMMENT 
"Run SLD_Program"
#END

STR ST1
RUN SLD_Program

// End of Code Block $Main
$PGMEND $Main

// Beginning of Code Block HBW_Program
$PRGRM HBW_Program

// Rung HBW_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"HBW Program"
#END

SG HBW_Program.S0

// Rung HBW_Program#2
// Offset 2
#BEGIN FMT_COMMENT 
"Initialize Positional Data"
#END

STR ST0
INIT "3 D4 ST1023 7570 D5 ST1023 5238 D6 ST1023 2910 D7 ST1023 3187 D8 ST1023 1621 D9 ST1023 233 D17 ST1023 3087 D18 ST1023 1521 D19 ST1023 125 D22 ST1023 0 C2 ST1023 0 C3 ST1023 0 C307 ST1023 0"

// Rung HBW_Program#3
// Offset 32
#BEGIN FMT_COMMENT 
"testkat<br>"
#END

STR ST0
JMP HBW_Program.S1

// Rung HBW_Program#4
// Offset 34
STR C110
JMP HBW_Program.S2

// Rung HBW_Program#5
// Offset 36
STR C111
JMP HBW_Program.S3

// Rung HBW_Program#6
// Offset 38
STR C112
JMP HBW_Program.S4

// Rung HBW_Program#7
// Offset 40
STR C113
JMP HBW_Program.S5

// Rung HBW_Program#8
// Offset 42
STR C114
JMP HBW_Program.S6

// Rung HBW_Program#9
// Offset 44
STR C115
JMP HBW_Program.S7

// Rung HBW_Program#10
// Offset 46
STR C116
JMP HBW_Program.S8

// Rung HBW_Program#11
// Offset 48
STR C117
JMP HBW_Program.S9

// Rung HBW_Program#12
// Offset 50
#BEGIN FMT_COMMENT 
"Jump To Auto"
#END

STR C5
JMP HBW_Program.S10

// Rung HBW_Program#13
// Offset 52
HSCNT @HBW_Encoder_X $HBW_Encoder_X X9 X8 X0 ST1023 ST1023 DST511

// Rung HBW_Program#14
// Offset 63
HSCNT @HBW_Encoder_Z $HBW_Encoder_Z X6 X7 X3 ST1023 ST1023 DST511

// Rung HBW_Program#15
// Offset 74
#BEGIN FMT_COMMENT 
"AUTO MODE"
#END

SG HBW_Program.S10

// Rung HBW_Program#16
// Offset 76
#BEGIN FMT_COMMENT 
"Debug Rung<br> "
#END

STR ST1
ANDN ST1
JMP HBW_Program.S50

// Rung HBW_Program#17
// Offset 79
STR ST1
JMPI D22 HBW_Program.S50 HBW_Program.S58

// Rung HBW_Program#18
// Offset 83
#BEGIN FMT_COMMENT 
"Row1Col1"
#END

SG HBW_Program.S50

// Rung HBW_Program#19
// Offset 85
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D4
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#20
// Offset 105
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#21
// Offset 121
STRN C3
ANDLE $HBW_Encoder_Z.Acc D9
OUT Y4

// Rung HBW_Program#22
// Offset 127
STR C3
ANDGE $HBW_Encoder_Z.Acc D19
OUT Y5

// Rung HBW_Program#23
// Offset 133
STRN C3
ANDGE $HBW_Encoder_Z.Acc D9
ANDGE $HBW_Encoder_X.Acc D4
JMP HBW_Program.S12

// Rung HBW_Program#24
// Offset 143
STR C3
ANDLE $HBW_Encoder_Z.Acc D19
ANDGE $HBW_Encoder_X.Acc D4
JMP HBW_Program.S26

// Rung HBW_Program#25
// Offset 153
#BEGIN FMT_COMMENT 
"Row2Col1<br> "
#END

SG HBW_Program.S51

// Rung HBW_Program#26
// Offset 155
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D4
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#27
// Offset 175
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#28
// Offset 191
STR C3
ANDGE $HBW_Encoder_Z.Acc D18
OUT Y5

// Rung HBW_Program#29
// Offset 197
STRN C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D8
OUT Y4
POPBOOL
ANDGE $HBW_Encoder_Z.Acc D8
ANDGE $HBW_Encoder_X.Acc D4
JMP HBW_Program.S12

// Rung HBW_Program#30
// Offset 214
STR C3
ANDLE $HBW_Encoder_Z.Acc D18
ANDGE $HBW_Encoder_X.Acc D4
JMP HBW_Program.S26

// Rung HBW_Program#31
// Offset 224
#BEGIN FMT_COMMENT 
"Row3Col1<br> "
#END

SG HBW_Program.S52

// Rung HBW_Program#32
// Offset 226
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D4
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#33
// Offset 246
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#34
// Offset 262
STR C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D17
OUT C300
POPBOOL
ANDGT $HBW_Encoder_Z.Acc D17
ANDGE $HBW_Encoder_X.Acc D4
JMP HBW_Program.S26

// Rung HBW_Program#35
// Offset 279
STRN C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D7
OUT C301
POPBOOL
ANDGE $HBW_Encoder_Z.Acc D7
ANDGE $HBW_Encoder_X.Acc D4
JMP HBW_Program.S12

// Rung HBW_Program#36
// Offset 296
STR C300
OR C301
OUT Y4

// Rung HBW_Program#37
// Offset 299
#BEGIN FMT_COMMENT 
"Row1Col2<br> "
#END

SG HBW_Program.S53

// Rung HBW_Program#38
// Offset 301
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100

// Rung HBW_Program#39
// Offset 317
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D5
OUT Y50

// Rung HBW_Program#40
// Offset 322
STRGE $HBW_Encoder_X.Acc D5
OUT Y51

// Rung HBW_Program#41
// Offset 327
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#42
// Offset 343
STRN C3
DUPBOOL
ANDGT $HBW_Encoder_Z.Acc D9
OUT C303
POPBOOL
ANDLT $HBW_Encoder_Z.Acc D9
ANDLT $HBW_Encoder_X.Acc D5
JMP HBW_Program.S12

// Rung HBW_Program#43
// Offset 360
STR C3
DUPBOOL
ANDGE $HBW_Encoder_Z.Acc D19
OUT C304
POPBOOL
ANDLE $HBW_Encoder_Z.Acc D19
ANDGE $HBW_Encoder_X.Acc D5
JMP HBW_Program.S26

// Rung HBW_Program#44
// Offset 377
STR C303
OR C304
OUT Y5

// Rung HBW_Program#45
// Offset 380
#BEGIN FMT_COMMENT 
"Row2Col2<br> "
#END

SG HBW_Program.S54

// Rung HBW_Program#46
// Offset 382
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D5
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#47
// Offset 402
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#48
// Offset 418
STR C3
ANDGE $HBW_Encoder_Z.Acc D18
OUT Y5

// Rung HBW_Program#49
// Offset 424
STRN C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D8
OUT Y4
POPBOOL
ANDGE $HBW_Encoder_Z.Acc D8
ANDGE $HBW_Encoder_X.Acc D5
JMP HBW_Program.S12

// Rung HBW_Program#50
// Offset 441
STR C3
ANDLE $HBW_Encoder_Z.Acc D18
ANDGE $HBW_Encoder_X.Acc D5
JMP HBW_Program.S26

// Rung HBW_Program#51
// Offset 451
#BEGIN FMT_COMMENT 
"Row3Col2<br> "
#END

SG HBW_Program.S55

// Rung HBW_Program#52
// Offset 453
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D5
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#53
// Offset 473
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#54
// Offset 489
STR C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D17
OUT C300
POPBOOL
ANDGT $HBW_Encoder_Z.Acc D17
ANDGE $HBW_Encoder_X.Acc D5
JMP HBW_Program.S26

// Rung HBW_Program#55
// Offset 506
STRN C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D7
OUT C301
POPBOOL
ANDGE $HBW_Encoder_Z.Acc D7
ANDGE $HBW_Encoder_X.Acc D5
JMP HBW_Program.S12

// Rung HBW_Program#56
// Offset 523
STR C300
OR C301
OUT Y4

// Rung HBW_Program#57
// Offset 526
#BEGIN FMT_COMMENT 
"Row1Col3<br> "
#END

SG HBW_Program.S56

// Rung HBW_Program#58
// Offset 528
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100

// Rung HBW_Program#59
// Offset 544
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D6
OUT Y50

// Rung HBW_Program#60
// Offset 549
STRGE $HBW_Encoder_X.Acc D6
OUT Y51

// Rung HBW_Program#61
// Offset 554
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#62
// Offset 570
STRN C3
DUPBOOL
ANDGT $HBW_Encoder_Z.Acc D9
OUT C303
POPBOOL
ANDLT $HBW_Encoder_Z.Acc D9
ANDLT $HBW_Encoder_X.Acc D6
JMP HBW_Program.S12

// Rung HBW_Program#63
// Offset 587
STR C3
DUPBOOL
ANDGE $HBW_Encoder_Z.Acc D19
OUT C304
POPBOOL
ANDLE $HBW_Encoder_Z.Acc D19
ANDGE $HBW_Encoder_X.Acc D6
JMP HBW_Program.S26

// Rung HBW_Program#64
// Offset 604
STR C303
OR C304
OUT Y5

// Rung HBW_Program#65
// Offset 607
#BEGIN FMT_COMMENT 
"Row2Col3<br> "
#END

SG HBW_Program.S57

// Rung HBW_Program#66
// Offset 609
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D6
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#67
// Offset 629
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#68
// Offset 645
STR C3
ANDGE $HBW_Encoder_Z.Acc D18
OUT Y5

// Rung HBW_Program#69
// Offset 651
STRN C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D8
OUT Y4
POPBOOL
ANDGE $HBW_Encoder_Z.Acc D8
ANDGE $HBW_Encoder_X.Acc D6
JMP HBW_Program.S12

// Rung HBW_Program#70
// Offset 668
STR C3
ANDLE $HBW_Encoder_Z.Acc D18
ANDGE $HBW_Encoder_X.Acc D6
JMP HBW_Program.S26

// Rung HBW_Program#71
// Offset 678
#BEGIN FMT_COMMENT 
"Row3Col3"
#END

SG HBW_Program.S58

// Rung HBW_Program#72
// Offset 680
#BEGIN FMT_COMMENT 
"Move To Rack Pos<br>"
#END

STRLT $HBW_Encoder_X.Acc D6
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y50

// Rung HBW_Program#73
// Offset 700
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100

// Rung HBW_Program#74
// Offset 716
STR C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D17
OUT C300
POPBOOL
ANDGT $HBW_Encoder_Z.Acc D17
ANDGE $HBW_Encoder_X.Acc D6
JMP HBW_Program.S26

// Rung HBW_Program#75
// Offset 733
STRN C3
DUPBOOL
ANDLE $HBW_Encoder_Z.Acc D7
OUT C301
POPBOOL
ANDGE $HBW_Encoder_Z.Acc D7
ANDGE $HBW_Encoder_X.Acc D6
JMP HBW_Program.S12

// Rung HBW_Program#76
// Offset 750
STR C300
OR C301
OUT Y4

// Rung HBW_Program#77
// Offset 753
STRPD ST1
COPY 0x1 "4 0x0 1 C307 1"

// Rung HBW_Program#78
// Offset 760
#BEGIN FMT_COMMENT 
"IN POSITION:  Move canteliver in "
#END

SG HBW_Program.S12

// Rung HBW_Program#79
// Offset 762
STR ST1
ANDN X10
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y6

// Rung HBW_Program#80
// Offset 780
STR X10
JMP HBW_Program.S14

// Rung HBW_Program#81
// Offset 782
#BEGIN FMT_COMMENT 
"Lift Pallet"
#END

SG HBW_Program.S14

// Rung HBW_Program#82
// Offset 784
#BEGIN FMT_COMMENT 
"Capture Current Z Pos<br> "
#END

STRPD ST1
MATH D1 "$HBW_Encoder_Z.Acc - 150"
MATH D3 "$HBW_Encoder_Z.Acc + 300"
COPY 0x1 "4 0x0 $HBW_Encoder_Z.Acc D2 1"

// Rung HBW_Program#83
// Offset 808
#BEGIN FMT_COMMENT 
"Lift Pallet<br> "
#END

STR ST1
ANDGT $HBW_Encoder_Z.Acc D1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100
OUT Y5

// Rung HBW_Program#84
// Offset 829
STRLE $HBW_Encoder_Z.Acc D1
JMP HBW_Program.S15

// Rung HBW_Program#85
// Offset 834
#BEGIN FMT_COMMENT 
"Retract"
#END

SG HBW_Program.S15

// Rung HBW_Program#86
// Offset 836
STR ST1
ANDN X11
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y7

// Rung HBW_Program#87
// Offset 854
STR X11
JMP HBW_Program.S16

// Rung HBW_Program#88
// Offset 856
#BEGIN FMT_COMMENT 
"Move To Conveyor<br> "
#END

SG HBW_Program.S16

// Rung HBW_Program#89
// Offset 858
#BEGIN FMT_COMMENT 
" Move Towards Conveyor"
#END

STR ST1
ANDGE $HBW_Encoder_X.Acc 6
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#90
// Offset 879
#BEGIN FMT_COMMENT 
"If we are above, Move Down<br> "
#END

STR ST1
ANDLT $HBW_Encoder_Z.Acc 2530
STR ST1
ANDGE $HBW_Encoder_Z.Acc 2550
ORSTR
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 300 100

// Rung HBW_Program#91
// Offset 905
#BEGIN FMT_COMMENT 
"If we are below, Move Up"
#END

STR ST1
DUPBOOL
ANDLT $HBW_Encoder_Z.Acc 2530
OUT Y4
POPBOOL
ANDGE $HBW_Encoder_Z.Acc 2550
OUT Y5

// Rung HBW_Program#92
// Offset 918
#BEGIN FMT_COMMENT 
"Positional Checks then Jump<br> "
#END

STRLE $HBW_Encoder_X.Acc 6
ANDLE $HBW_Encoder_Z.Acc 2550
ANDGE $HBW_Encoder_Z.Acc 2530
JMP HBW_Program.S19

// Rung HBW_Program#93
// Offset 931
#BEGIN FMT_COMMENT 
"Extend Cantilever"
#END

SG HBW_Program.S19

// Rung HBW_Program#94
// Offset 933
STR ST1
ANDN X10
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y6

// Rung HBW_Program#95
// Offset 951
STR X10
JMP HBW_Program.S17

// Rung HBW_Program#96
// Offset 953
#BEGIN FMT_COMMENT 
"Move Down To Drop Pallet on Conveyor<br> "
#END

SG HBW_Program.S17

// Rung HBW_Program#97
// Offset 955
#BEGIN FMT_COMMENT 
"Moving Down<br> "
#END

STR ST1
ANDLT $HBW_Encoder_Z.Acc 2800
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100
OUT Y4

// Rung HBW_Program#98
// Offset 976
STRGE $HBW_Encoder_Z.Acc 2800
JMP HBW_Program.S20

// Rung HBW_Program#99
// Offset 981
#BEGIN FMT_COMMENT 
"Conveyor FWD and wait<br> "
#END

SG HBW_Program.S20

// Rung HBW_Program#100
// Offset 983
STR ST1
AND X2
ANDN C6
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 50
OUT Y48

// Rung HBW_Program#101
// Offset 1001
STRN X2
COPY 0x1 "4 0x0 1 C2 1"
JMP HBW_Program.S21

// Rung HBW_Program#102
// Offset 1008
#BEGIN FMT_COMMENT 
"Wait then REV conveyor<br> "
#END

SG HBW_Program.S21

// Rung HBW_Program#103
// Offset 1010
STR C7
COPY 0x1 "4 0x0 0 C2 1"

// Rung HBW_Program#104
// Offset 1016
STRN C2
AND X1
ANDN C6
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 50
OUT Y49
COPY 0x1 "4 0x0 1 C3 1"

// Rung HBW_Program#105
// Offset 1039
STRN X1
JMP HBW_Program.S22

// Rung HBW_Program#106
// Offset 1041
#BEGIN FMT_COMMENT 
"Lift Empty Pallet<br> "
#END

SG HBW_Program.S22

// Rung HBW_Program#107
// Offset 1043
#BEGIN FMT_COMMENT 
"Moving Down<br>"
#END

STR ST1
ANDGE $HBW_Encoder_Z.Acc 2550
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100
OUT Y5

// Rung HBW_Program#108
// Offset 1064
STRLE $HBW_Encoder_Z.Acc 2550
JMP HBW_Program.S18

// Rung HBW_Program#109
// Offset 1069
#BEGIN FMT_COMMENT 
"Retract Cantilever from Conveyor<br> "
#END

SG HBW_Program.S18

// Rung HBW_Program#110
// Offset 1071
STR ST1
ANDN X11
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y7

// Rung HBW_Program#111
// Offset 1089
STR X11
JMPI D22 HBW_Program.S50 HBW_Program.S58

// Rung HBW_Program#112
// Offset 1093
#BEGIN FMT_COMMENT 
"Extend Empty Pallet Back in Rack<br> "
#END

SG HBW_Program.S26

// Rung HBW_Program#113
// Offset 1095
STR ST1
ANDN X10
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y6

// Rung HBW_Program#114
// Offset 1113
STR X10
JMP HBW_Program.S24

// Rung HBW_Program#115
// Offset 1115
#BEGIN FMT_COMMENT 
"Drop Empty Pallet Back in Rack<br> "
#END

SG HBW_Program.S24

// Rung HBW_Program#116
// Offset 1117
#BEGIN FMT_COMMENT 
"Capture Current Z Pos<br>"
#END

STRPD ST1
MATH D33 "$HBW_Encoder_Z.Acc + 150"
COPY 0x1 "4 0x0 $HBW_Encoder_Z.Acc D2 1"

// Rung HBW_Program#117
// Offset 1133
#BEGIN FMT_COMMENT 
"Lift Pallet<br>"
#END

STR ST1
ANDLE $HBW_Encoder_Z.Acc D33
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100
OUT Y4

// Rung HBW_Program#118
// Offset 1154
STRGE $HBW_Encoder_Z.Acc D33
JMP HBW_Program.S23

// Rung HBW_Program#119
// Offset 1159
#BEGIN FMT_COMMENT 
"Retract After dropping Empty Pallet<br> "
#END

SG HBW_Program.S23

// Rung HBW_Program#120
// Offset 1161
STR ST1
ANDN X11
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y7

// Rung HBW_Program#121
// Offset 1179
STR X11
JMP HBW_Program.S25

// Rung HBW_Program#122
// Offset 1181
#BEGIN FMT_COMMENT 
"Increment and Start over"
#END

SG HBW_Program.S25

// Rung HBW_Program#123
// Offset 1183
#BEGIN FMT_COMMENT 
"Increment Index<br> "
#END

STRPD ST1
INC D22

// Rung HBW_Program#124
// Offset 1186
STRPD ST1
COPY 0x1 "4 0x0 0 C3 1"

// Rung HBW_Program#125
// Offset 1193
STR C307
JMP HBW_Program.S0

// Rung HBW_Program#126
// Offset 1195
#BEGIN FMT_COMMENT 
"Jump Back TO AUTO Mode START"
#END

STR X11
ANDN C307
JMP HBW_Program.S10

// Rung HBW_Program#127
// Offset 1198
#BEGIN FMT_COMMENT 
"RESET STAGE"
#END

SG HBW_Program.S1

// Rung HBW_Program#128
// Offset 1200
STR ST1
ANDN X11
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 100
OUT Y7

// Rung HBW_Program#129
// Offset 1218
STR X11
SET C308

// Rung HBW_Program#130
// Offset 1220
STR C308
ANDN X3
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 100
OUT Y5

// Rung HBW_Program#131
// Offset 1238
STR C308
ANDN X0
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 100
OUT Y51

// Rung HBW_Program#132
// Offset 1256
STR X0
AND X3
RST C308
RSTCT CT1
RSTCT CT2
RSTCT CT3
JMP HBW_Program.S0

// Rung HBW_Program#133
// Offset 1263
SG HBW_Program.S11

// Rung HBW_Program#134
// Offset 1265
STR ST1
ANDPDPF
OUT C405

// Rung HBW_Program#135
// Offset 1268
STRN CT0.Done
OUT Y4

// Rung HBW_Program#136
// Offset 1270
STR X6
ANDN CT0.Done
STR C405
CNT CT0 V400

// Rung HBW_Program#137
// Offset 1275
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 50

// Rung HBW_Program#138
// Offset 1291
STR CT0.Done
JMP HBW_Program.S0

// Rung HBW_Program#139
// Offset 1293
#BEGIN FMT_COMMENT 
"CANTELEVER IN"
#END

SG HBW_Program.S2

// Rung HBW_Program#140
// Offset 1295
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 50

// Rung HBW_Program#141
// Offset 1311
STRN X10
OUT Y6

// Rung HBW_Program#142
// Offset 1313
STR X10
ORND C110
JMP HBW_Program.S0

// Rung HBW_Program#143
// Offset 1317
#BEGIN FMT_COMMENT 
"CANTELEVER OUT<br>"
#END

SG HBW_Program.S3

// Rung HBW_Program#144
// Offset 1319
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M4 $HBW_PWM_M4 Y83 200 50

// Rung HBW_Program#145
// Offset 1335
STRN X11
OUT Y7

// Rung HBW_Program#146
// Offset 1337
STR X11
ORND C111
JMP HBW_Program.S0

// Rung HBW_Program#147
// Offset 1341
SG HBW_Program.S4

// Rung HBW_Program#148
// Offset 1343
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 50

// Rung HBW_Program#149
// Offset 1359
STRN X0
OUT Y51

// Rung HBW_Program#150
// Offset 1361
STR X0
ORND C112
JMP HBW_Program.S0

// Rung HBW_Program#151
// Offset 1365
SG HBW_Program.S5

// Rung HBW_Program#152
// Offset 1367
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M2 $HBW_PWM_M2 Y81 200 50

// Rung HBW_Program#153
// Offset 1383
STR ST1
OUT Y50

// Rung HBW_Program#154
// Offset 1385
STRND C113
JMP HBW_Program.S0

// Rung HBW_Program#155
// Offset 1388
SG HBW_Program.S6

// Rung HBW_Program#156
// Offset 1390
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 50

// Rung HBW_Program#157
// Offset 1406
STRN X3
OUT Y5

// Rung HBW_Program#158
// Offset 1408
STRND C114
OR X3
JMP HBW_Program.S0

// Rung HBW_Program#159
// Offset 1412
SG HBW_Program.S7

// Rung HBW_Program#160
// Offset 1414
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M3 $HBW_PWM_M3 Y82 200 50

// Rung HBW_Program#161
// Offset 1430
STR ST1
OUT Y4

// Rung HBW_Program#162
// Offset 1432
STRND C115
JMP HBW_Program.S0

// Rung HBW_Program#163
// Offset 1435
#BEGIN FMT_COMMENT 
"Conveyor FWD<br> "
#END

SG HBW_Program.S8

// Rung HBW_Program#164
// Offset 1437
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 50

// Rung HBW_Program#165
// Offset 1453
STR ST1
OUT Y48

// Rung HBW_Program#166
// Offset 1455
STRND C116
JMP HBW_Program.S0

// Rung HBW_Program#167
// Offset 1458
#BEGIN FMT_COMMENT 
"Conveyor RVS<br> "
#END

SG HBW_Program.S9

// Rung HBW_Program#168
// Offset 1460
STR ST1
ANDN C6
PWMOUT @HBW_PWM_M1 $HBW_PWM_M1 Y80 200 50

// Rung HBW_Program#169
// Offset 1476
STR ST1
OUT Y49

// Rung HBW_Program#170
// Offset 1478
STRND C117
JMP HBW_Program.S0

// End of Code Block HBW_Program
$PGMEND HBW_Program

// Beginning of Code Block VGR_Program
$PRGRM VGR_Program

// Rung VGR_Program#1
// Offset 0
SG VGR_Program.S0

// Rung VGR_Program#2
// Offset 2
STRPD C5
COPY 0x1 "4 0x0 1 C452 1 0x0 1 C1621 1"

// Rung VGR_Program#3
// Offset 10
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#4
// Offset 18
STR ST1
DUPBOOL
STR C410
ANDN C409
STRN C410
AND C409
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
POPBOOL
DUPBOOL
AND C410
OUT Y27
POPBOOL
AND C409
OUT Y26

// Rung VGR_Program#5
// Offset 47
STR ST1
DUPBOOL
STR C408
ANDN C411
STRN C408
AND C411
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
POPBOOL
DUPBOOL
AND C408
OUT Y24
POPBOOL
AND C411
OUT Y25

// Rung VGR_Program#6
// Offset 76
STR ST1
DUPBOOL
STR C406
ANDN C407
STRN C406
AND C407
ORSTR
ANDSTR
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
POPBOOL
DUPBOOL
AND C406
OUT Y23
POPBOOL
AND C407
OUT Y22

// Rung VGR_Program#7
// Offset 105
STR C452
JMP VGR_Program.S1

// Rung VGR_Program#8
// Offset 107
SG VGR_Program.S1

// Rung VGR_Program#9
// Offset 109
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#10
// Offset 111
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#11
// Offset 119
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#12
// Offset 135
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#13
// Offset 151
STRN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#14
// Offset 167
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_Program#15
// Offset 169
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_Program#16
// Offset 171
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_Program#17
// Offset 173
STR X25
AND X26
AND X27
JMP VGR_Program.S2

// Rung VGR_Program#18
// Offset 177
SG VGR_Program.S2

// Rung VGR_Program#19
// Offset 179
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#20
// Offset 187
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#21
// Offset 189
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_Program#22
// Offset 191
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_Program#23
// Offset 193
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_Program#24
// Offset 195
STR ST1
OUT $VGR_Encoder_Rot.EnableCapture

// Rung VGR_Program#25
// Offset 197
STR ST1
OUT $VGR_Encoder_X.EnableCapture

// Rung VGR_Program#26
// Offset 199
STR ST1
OUT $VGR_Encoder_Y.EnableCapture

// Rung VGR_Program#27
// Offset 201
STRGE 5340 $VGR_Encoder_Rot.Acc
ANDGE 5360 $VGR_Encoder_Rot.Acc
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y27

// Rung VGR_Program#28
// Offset 224
STRGE 725 $VGR_Encoder_X.Acc
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y25

// Rung VGR_Program#29
// Offset 243
STRN X2
JMP VGR_Program.S3

// Rung VGR_Program#30
// Offset 245
SG VGR_Program.S3

// Rung VGR_Program#31
// Offset 247
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#32
// Offset 255
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#33
// Offset 257
STRGE 600 $VGR_Encoder_Y.Acc
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y23

// Rung VGR_Program#34
// Offset 276
STRGE $VGR_Encoder_Y.Acc 600
JMP VGR_Program.S4

// Rung VGR_Program#35
// Offset 281
SG VGR_Program.S4

// Rung VGR_Program#36
// Offset 283
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#37
// Offset 291
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#38
// Offset 293
STR ST1
OUT Y28

// Rung VGR_Program#39
// Offset 295
STR Y28
JMP VGR_Program.S5

// Rung VGR_Program#40
// Offset 297
SG VGR_Program.S5

// Rung VGR_Program#41
// Offset 299
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#42
// Offset 307
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#43
// Offset 309
STR ST1
OUT Y28

// Rung VGR_Program#44
// Offset 311
STR ST1
OUT Y29

// Rung VGR_Program#45
// Offset 313
STR Y29
JMP VGR_Program.S6

// Rung VGR_Program#46
// Offset 315
SG VGR_Program.S6

// Rung VGR_Program#47
// Offset 317
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#48
// Offset 325
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#49
// Offset 327
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#50
// Offset 330
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#51
// Offset 346
STR X25
JMP VGR_Program.S7

// Rung VGR_Program#52
// Offset 348
SG VGR_Program.S7

// Rung VGR_Program#53
// Offset 350
STRPD ST1
COPY 0x1 "4 0x0 0 C2 1"

// Rung VGR_Program#54
// Offset 357
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#55
// Offset 365
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#56
// Offset 367
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#57
// Offset 370
STR ST1
MOVE 1 C299

// Rung VGR_Program#58
// Offset 373
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#59
// Offset 389
STR X26
JMP VGR_Program.S8

// Rung VGR_Program#60
// Offset 391
SG VGR_Program.S8

// Rung VGR_Program#61
// Offset 393
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#62
// Offset 401
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#63
// Offset 403
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#64
// Offset 406
STRN X27
ANDGE $VGR_Encoder_Rot.Acc 3567
ANDGE $VGR_Encoder_Rot.Acc 3557
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#65
// Offset 430
STRGE 3404 $VGR_Encoder_X.Acc
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y25

// Rung VGR_Program#66
// Offset 449
STRGE $VGR_Encoder_X.Acc 3404
JMP VGR_Program.S9

// Rung VGR_Program#67
// Offset 454
SG VGR_Program.S9

// Rung VGR_Program#68
// Offset 456
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#69
// Offset 464
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#70
// Offset 466
STR ST1
OUT Y28
OUT Y29

// Rung VGR_Program#71
// Offset 469
STRGE 2026 $VGR_Encoder_Y.Acc
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y23

// Rung VGR_Program#72
// Offset 488
STRGE $VGR_Encoder_Y.Acc 2026
JMP VGR_Program.S10

// Rung VGR_Program#73
// Offset 493
SG VGR_Program.S10

// Rung VGR_Program#74
// Offset 495
STR ST1
CALL VGR_Copy_State 0x1 DST511 "3" "3"

// Rung VGR_Program#75
// Offset 503
STRN C452
JMP VGR_Program.S0

// Rung VGR_Program#76
// Offset 505
STR ST2
OUT Y29

// Rung VGR_Program#77
// Offset 507
STRN X25
ANDN Y29
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#78
// Offset 524
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#79
// Offset 540
STR ST2
JMP VGR_Program.S11

// Rung VGR_Program#80
// Offset 542
STR X25
AND X26
JMP VGR_Program.S2

// Rung VGR_Program#81
// Offset 545
SG VGR_Program.S11

// Rung VGR_Program#82
// Offset 547
STRN X25
PWMOUT @VGR_PWM_M1 $VGR_PWM_M1 Y88 500 100
OUT Y22

// Rung VGR_Program#83
// Offset 563
STRN X26
PWMOUT @VGR_PWM_M2 $VGR_PWM_M2 Y89 500 100
OUT Y24

// Rung VGR_Program#84
// Offset 579
STRN X27
PWMOUT @VGR_PWM_M3 $VGR_PWM_M3 Y90 500 100
OUT Y26

// Rung VGR_Program#85
// Offset 595
STR X27
OUT $VGR_Encoder_Rot.ResetLevel

// Rung VGR_Program#86
// Offset 597
STR X26
OUT $VGR_Encoder_X.ResetLevel

// Rung VGR_Program#87
// Offset 599
STR X25
OUT $VGR_Encoder_Y.ResetLevel

// Rung VGR_Program#88
// Offset 601
STR ST1
MOVE 1 C700

// Rung VGR_Program#89
// Offset 604
NOP

// Rung VGR_Program#90
// Offset 605
NOP

// End of Code Block VGR_Program
$PGMEND VGR_Program

// Beginning of Code Block MPO_Program
$PRGRM MPO_Program

// Rung MPO_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"MPO Program"
#END

NOP

// End of Code Block MPO_Program
$PGMEND MPO_Program

// Beginning of Code Block SLD_Program
$PRGRM SLD_Program

// Rung SLD_Program#1
// Offset 0
SG SLD_Program.S0

// Rung SLD_Program#2
// Offset 2
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#3
// Offset 10
STR C1616
OUT Y30

// Rung SLD_Program#4
// Offset 12
STR C1617
OUT Y31

// Rung SLD_Program#5
// Offset 14
STR C1618
OUT Y32

// Rung SLD_Program#6
// Offset 16
STR C1619
OUT Y33

// Rung SLD_Program#7
// Offset 18
STR C1620
OUT Y34

// Rung SLD_Program#8
// Offset 20
STR C1621
JMP SLD_Program.S1

// Rung SLD_Program#9
// Offset 22
SG SLD_Program.S1

// Rung SLD_Program#10
// Offset 24
STR C1666
JMP SLD_Program.S0

// Rung SLD_Program#11
// Offset 26
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#12
// Offset 34
STRN C1621
JMP SLD_Program.S0

// Rung SLD_Program#13
// Offset 36
STRN X35
OFFDTMR T200 1750 C1622

// Rung SLD_Program#14
// Offset 40
STR C1622
OUT Y30

// Rung SLD_Program#15
// Offset 42
STRND Y30
JMP SLD_Program.S2

// Rung SLD_Program#16
// Offset 45
STR C1626
OUT Y47

// Rung SLD_Program#17
// Offset 47
SG SLD_Program.S2

// Rung SLD_Program#18
// Offset 49
STR C1666
JMP SLD_Program.S0

// Rung SLD_Program#19
// Offset 51
STR C1626
OUT Y47

// Rung SLD_Program#20
// Offset 53
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#21
// Offset 61
STRN C1621
JMP SLD_Program.S0

// Rung SLD_Program#22
// Offset 63
STR ST1
MOVE WX0 V3216

// Rung SLD_Program#23
// Offset 66
STRLE WX0 13333
JMP SLD_Program.S3

// Rung SLD_Program#24
// Offset 71
STRGE WX0 16000
ANDLE WX0 20999
JMP SLD_Program.S4

// Rung SLD_Program#25
// Offset 80
STRGE WX0 21000
ANDLE WX0 24000
JMP SLD_Program.S5

// Rung SLD_Program#26
// Offset 89
STRGE WX0 24001
JMP SLD_Program.S1

// Rung SLD_Program#27
// Offset 94
SG SLD_Program.S3

// Rung SLD_Program#28
// Offset 96
STR C1666
JMP SLD_Program.S0

// Rung SLD_Program#29
// Offset 98
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#30
// Offset 106
STR ST1
OUT Y31

// Rung SLD_Program#31
// Offset 108
STR Y31
TMR T216 1900

// Rung SLD_Program#32
// Offset 111
STR T216.Timing
ANDN T216.Done
OUT Y30

// Rung SLD_Program#33
// Offset 114
STR T216.Done
OUT Y32

// Rung SLD_Program#34
// Offset 116
STRN C1621
JMP SLD_Program.S0

// Rung SLD_Program#35
// Offset 118
STR Y32
ONDTMR T217 125 C1623

// Rung SLD_Program#36
// Offset 122
STR C1623
JMP SLD_Program.S1

// Rung SLD_Program#37
// Offset 124
SG SLD_Program.S4

// Rung SLD_Program#38
// Offset 126
STR C1666
JMP SLD_Program.S0

// Rung SLD_Program#39
// Offset 128
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#40
// Offset 136
STR ST1
OUT Y31

// Rung SLD_Program#41
// Offset 138
STR Y31
TMR T218 2850

// Rung SLD_Program#42
// Offset 141
STR T218.Timing
ANDN T218.Done
OUT Y30

// Rung SLD_Program#43
// Offset 144
STR T218.Done
OUT Y33

// Rung SLD_Program#44
// Offset 146
STR Y33
ONDTMR T219 125 C1624

// Rung SLD_Program#45
// Offset 150
STR C1624
JMP SLD_Program.S1

// Rung SLD_Program#46
// Offset 152
STRN C1621
JMP SLD_Program.S0

// Rung SLD_Program#47
// Offset 154
SG SLD_Program.S5

// Rung SLD_Program#48
// Offset 156
STR C1666
JMP SLD_Program.S0

// Rung SLD_Program#49
// Offset 158
STR ST1
CALL SLD_Copy_State 0x1 DST511 "3" "3"

// Rung SLD_Program#50
// Offset 166
STR ST1
OUT Y31

// Rung SLD_Program#51
// Offset 168
STR Y31
TMR T220 3800

// Rung SLD_Program#52
// Offset 171
STR T220.Timing
ANDN T220.Done
OUT Y30

// Rung SLD_Program#53
// Offset 174
STR T220.Done
OUT Y34

// Rung SLD_Program#54
// Offset 176
STR Y34
ONDTMR T221 125 C1625

// Rung SLD_Program#55
// Offset 180
STR C1625
JMP SLD_Program.S1

// Rung SLD_Program#56
// Offset 182
STRN C1621
JMP SLD_Program.S0

// Rung SLD_Program#57
// Offset 184
NOP

// Rung SLD_Program#58
// Offset 185
#BEGIN FMT_COMMENT 
"SLD Program"
#END

NOP

// End of Code Block SLD_Program
$PGMEND SLD_Program

// Beginning of Code Block SSC_Program
$PRGRM SSC_Program

// Rung SSC_Program#1
// Offset 0
#BEGIN FMT_COMMENT 
"SSC Program"
#END

NOP

// End of Code Block SSC_Program
$PGMEND SSC_Program

#BEGIN ELEMENT_DOC
"X0","FLAGS = REST_READONLY","HBW_I1","","HBW - I1 = Reference switch horizontal axis -  IX_HBW_RefSwitchHor izontalAxis_I1"
"X1","FLAGS = REST_READONLY","HBW_I2","","HBW - I2 = Light barrier inside -  IX_HBW_LightBarrierIn side_I2"
"X2","FLAGS = REST_READONLY","HBW_I3","","HBW - I3 = Light barrier outside -  IX_HBW_LightBarrierO utside_I3"
"X3","FLAGS = REST_READONLY","HBW_I4","","HBW - I4 = Reference switch vertical axis -  IX_HBW_RefSwitchVer ticalAxis_I4"
"X4","FLAGS = REST_READONLY","HBW_A1","","HBW - A1 = Trail sensor (signal 1, lower) -  IX_HBW_TrailSensor1L ower_A1"
"X5","FLAGS = REST_READONLY","HBW_A2","","HBW - A2 = Trail sensor (signal 2, upper) -  IX_HBW_TrailSensor2 Upper_A2"
"X6","FLAGS = REST_READONLY","HBW_B3","","HBW - B3 = Encoder vertical axis imulse 1 -  IX_HBW_EncoderVerti calAxisImp1_B3"
"X7","FLAGS = REST_READONLY","HBW_B4","","HBW - B4 = Encoder vertical axis imulse 2 -  IX_HBW_EncoderVerti calAxisImp2_B4"
"X8","FLAGS = REST_READONLY","HBW_B1","","HBW - B1 = Encoder horizontal axis imulse 1 -  IX_HBW_EncoderHoriz ontalAxisImp1_B1"
"X9","FLAGS = REST_READONLY","HBW_B2","","HBW - B2 = Encoder horizontal axis imulse 2 -  IX_HBW_EncoderHoriz ontalAxisImp2_B2"
"X10","FLAGS = REST_READONLY","HBW_I5","","HBW - I5 = Reference switch cantilever front -  IX_HBW_SwitchCantile verFront_I5"
"X11","FLAGS = REST_READONLY","HBW_I6","","HBW - I6 = Reference switch cantilever back -  IX_HBW_SwitchCantile verBack_I6"
"X12","FLAGS = REST_READONLY","MPO_I1","","MPO - I1 = Reference switch turn-table (position vacuum) -  IX_MPO_RefSwitchTur nTable_PosVac_I1"
"X13","FLAGS = REST_READONLY","MPO_I2","","MPO - I2 = Reference switch turn-table (position belt) -  IX_MPO_RefSwitchTur nTable_PosBelt_I2"
"X14","FLAGS = REST_READONLY","MPO_I3","","MPO - I3 = Light barrier end of conveyor belt -  IX_MPO_LightBarrierEn dOfConBelt_I3"
"X15","FLAGS = REST_READONLY","MPO_I4","","MPO - I4 = Reference switch turn-table (position saw) -  IX_MPO_RefSwitchTur nTable_PosSaw_I4"
"X16","FLAGS = REST_READONLY","MPO_I5","","MPO - I5 = Reference switch vacuum (position turn-table) -  IX_MPO_RefSwitchVac _PosTurnTable_I5"
"X17","FLAGS = REST_READONLY","MPO_I6","","MPO - I6 = Reference switch oven feeder inside -  IX_MPO_RefSwitchOv enFeederInside_I6"
"X18","FLAGS = REST_READONLY","MPO_I7","","MPO - I7 = Reference switch oven feeder outside -  IX_MPO_RefSwitchOv enFeederOutside_I7"
"X19","FLAGS = REST_READONLY","MPO_I8","","MPO - I8 = Reference switch vacuum (position oven) -  IX_MPO_RefSwitchVac _PosOven_I8"
"X24","FLAGS = REST_READONLY","MPO_I9","","MPO - I9 = Light barrier oven -  IX_MPO_LightBarrierO v en_I9"
"X25","FLAGS = REST_READONLY","VGR_I1","","VGR - I1 = Reference switch vertical axis -  IX_VGR_RefSwitchVert icalAxis_I1"
"X26","FLAGS = REST_READONLY","VGR_I2","","VGR - I2 = Reference switch horizontal axis -  IX_VGR_RefSwitchHori zontalAxis_I2"
"X27","FLAGS = REST_READONLY","VGR_I3","","VGR - I3 = Reference switch rotate -  IX_VGR_RefSwitchRot ate_I3"
"X28","FLAGS = REST_READONLY","VGR_B1","","VGR - B1 = Encoder vertical axis imulse 1 -  IX_VGR_EncoderVertic alAxisImp1_B1"
"X29","FLAGS = REST_READONLY","VGR_B2","","VGR - B2 = Encoder vertical axis imulse 2 -  IX_VGR_EncoderVertic alAxisImp2_B2"
"X30","FLAGS = REST_READONLY","VGR_B3","","VGR - B3 = Encoder horizontal axis imulse 1 -  IX_VGR_EncoderHoriz ontalAxisImp1_B3"
"X31","FLAGS = REST_READONLY","VGR_B4","","VGR - B4 = Encoder horizontal axis imulse 2 -  IX_VGR_EncoderHoriz ontalAxisImp2_B4"
"X32","FLAGS = REST_READONLY","VGR_B5","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp1_B5"
"X33","FLAGS = REST_READONLY","VGR_B6","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp2_B6"
"X34","FLAGS = REST_READONLY","SLD_I1","","SLD - I1 = Pulse counter -  IX_SLD_PulseCounter_ I1"
"X35","FLAGS = REST_READONLY","SLD_I2","","SLD - I2 = Light barrier inlet -  IX_SLD_LightBarrierInl e t_I2"
"X36","FLAGS = REST_READONLY","SLD_I3","","SLD - I3 = Light barrier behind color sensor -  IX_SLD_LightBarrierBe hindColorSensor_I3"
"X37","FLAGS = REST_READONLY","SLD_I5","","SLD - I5 = Light barrier white -  IX_SLD_LightBarrierW h ite_I5"
"X38","FLAGS = REST_READONLY","SLD_I6","","SLD - I6 = Light barrier red -  IX_SLD_LightBarrierRe d_I6"
"X39","FLAGS = REST_READONLY","SLD_I7","","SLD - I7 = Light barrier blue -  IX_SLD_LightBarrierBl u e_I7"
"X40","FLAGS = REST_READONLY","SSC_I1","","SSC - I1 = Reference switch vertical axis -  IX_SSC_RefSwitchVerti calAxis_I1"
"X41","FLAGS = REST_READONLY","SSC_I2","","SSC - I2 = Reference switch horizontal axis -  IX_SSC_RefSwitchHori zontalAxis_I2"
"X42","FLAGS = REST_READONLY","SSC_I3","","SSC - I3 = Light barrier inlet -  IX_SSC_LightBarrierSto rage_I3"
"X43","FLAGS = REST_READONLY","SSC_I4","","SSC - I4 = Light barrier behind color sensor -  IX_SSC_LightBarrierOu t sourcing_I4"
"X44","FLAGS = REST_READONLY","SSC_B1","","SSC - B1 = Encoder vertical axis imulse 1 -  IX_SSC_EncoderVertic alAxisImp1_B1"
"X45","FLAGS = REST_READONLY","SSC_B2","","SSC - B2 = Encoder vertical axis imulse 2 -  IX_SSC_EncoderVertic alAxisImp2_B2"
"X46","FLAGS = REST_READONLY","SSC_B3","","SSC - B3 = Encoder horizontal axis imulse 1 -  IX_SSC_EncoderHorizo ntalAxisImp1_B3"
"X47","FLAGS = REST_READONLY","SSC_B4","","SSC - B4 = Encoder horizontal axis imulse 2 -  IX_SSC_EncoderHorizo ntalAxisImp2_B4"
"X56","FLAGS = REST_READONLY","VGR_PWM_ROTATE_1","","VGR - B5 = Encoder rotate impulse 1 -  IX_VGR_EncoderRotat eImp 1_B5"
"X57","FLAGS = REST_READONLY","VGR_PWM_ROTATE_2","","VGR - B6 = Encoder rotate impulse 2 -  IX_VGR_EncoderRotat eImp 2_B6"
"Y4","FLAGS = REST_READONLY","HBW_Q5","","HBW - Q5 = Motor M3 vertical axis downward -  QX_HBW_M3_Vertical AxisDownward_Q5"
"Y5","FLAGS = REST_READONLY","HBW_Q6","","HBW - Q6 = Motor M3 vertical axis upward -  QX_HBW_M3_Vertical AxisUpward_Q6"
"Y6","FLAGS = REST_READONLY","HBW_Q7","","HBW - Q7 = Motor M4 cantilever forward -  QX_HBW_M4_Cantilev erForward_Q7"
"Y7","FLAGS = REST_READONLY","HBW_Q8","","HBW - Q8 = Motor M4 cantilever backward -  QX_HBW_M4_Cantilev erBackward_Q8"
"Y15","FLAGS = REST_READONLY","MPO_Q8","","MPO - Q8 = Motor M5 vacuum towards turn- table -  QX_MPO_M5_Vacuum TowardsTurnTable_Q8"
"Y16","FLAGS = REST_READONLY","MPO_Q9","","MPO - Q9 = Light oven -  QX_MPO_LightOven_Q 9"
"Y17","FLAGS = REST_READONLY","MPO_Q10","","MPO - Q10 = Compressor -  QX_MPO_Compressor_ Q10"
"Y18","FLAGS = REST_READONLY","MPO_Q11","","MPO - Q11 = Valve vacuum -  QX_MPO_ValveVacuu m_Q11"
"Y19","FLAGS = REST_READONLY","MPO_Q12","","MPO - Q12 = Valve lowering -  QX_MPO_ValveLoweri ng_Q12"
"Y20","FLAGS = REST_READONLY","MPO_Q13","","MPO - Q13 = Valve oven door -  QX_MPO_ValveOvenD oor_Q13"
"Y21","FLAGS = REST_READONLY","MPO_Q14","","MPO - Q14 = Valve feeder -  QX_MPO_ValveFeeder _Q14"
"Y22","FLAGS = REST_READONLY","VGR_Q1","","VGR - Q1 = Motor M1 vertical axis up -  QX_VGR_M1_VerticalA xisUp_Q1"
"Y23","FLAGS = REST_READONLY","VGR_Q2","","VGR - Q2 = Motor M1 vertical axis down -  QX_VGR_M1_VerticalA xisDown_Q2"
"Y24","FLAGS = REST_READONLY","VGR_Q3","","VGR - Q3 = Motor M2 horizontal axis backward -  QX_VGR_M2_Horizont alAxisBackward_Q3"
"Y25","FLAGS = REST_READONLY","VGR_Q4","","VGR - Q4 = Motor M2 horizontal axis forward -  QX_VGR_M2_Horizont alAxisForward_Q4"
"Y26","FLAGS = REST_READONLY","VGR_Q5","","VGR - Q5 = Motor M3 rotate clockwise -  QX_VGR_M3_RotateCl ockwise_Q5"
"Y27","FLAGS = REST_READONLY","VGR_Q6","","VGR - Q6 = Motor M3 rotate counterclockwise -  QX_VGR_M3_RotateC ounterclockwise_Q6"
"Y28","FLAGS = REST_READONLY","VGR_Q7","","VGR - Q7 = Compressor -  QX_VGR_Compressor_ Q7"
"Y29","FLAGS = REST_READONLY","VGR_Q8","","VGR - Q8 = Valve vacuum -  QX_VGR_ValveVacuu m_Q8"
"Y30","FLAGS = REST_READONLY","SLD_Q1","","SLD - Q1 = Motor M1conveyor belt -  QX_SLD_M1_Conveyor Belt_Q1"
"Y31","FLAGS = REST_READONLY","SLD_Q2","","SLD - Q2 = Compressor -  QX_SLD_Compressor_ Q2"
"Y32","FLAGS = REST_READONLY","SLD_Q3","","SLD - Q3 = Valve first ejector (white) -  QX_SLD_ValveFirstEje ctorWhite_Q3"
"Y33","FLAGS = REST_READONLY","SLD_Q4","","SLD - Q4 = Valve second ejector (red) -  QX_SLD_ValveSecond EjectorRed_Q4"
"Y34","FLAGS = REST_READONLY","SLD_Q5","","SLD - Q5 = Valve third ejector (blue) -  QX_SLD_ValveThirdEje ctorBlue_Q5"
"Y35","FLAGS = REST_READONLY","SSC_Q1","","SSC - Q1 = Motor M1 vertical axis up -  QX_SSC_M1_VerticalA xisUp_Q1"
"Y36","FLAGS = REST_READONLY","SSC_Q2","","SSC - Q2 = Motor M1 vertical axis down -  QX_SSC_M1_VerticalA xisDown_Q2"
"Y37","FLAGS = REST_READONLY","SSC_Q3","","SSC - Q3 = Motor M2 horizontal axis backward -  QX_SSC_M2_Horizonta lAxisClockwise_Q3"
"Y38","FLAGS = REST_READONLY","SSC_Q4","","SSC - Q4 = Motor M2 horizontal axis forward -  QX_SSC_M2_Horizonta lAxisCounterclockwise_ Q4"
"Y39","FLAGS = REST_READONLY","SSC_Q5","","SSC - Q5 = LED Green -  QX_SSC_LED_Green_ Q5"
"Y40","FLAGS = REST_READONLY","SSC_Q6","","SSC - Q6 = LED Yellow -  QX_SSC_LED_Yellow_ Q6"
"Y41","FLAGS = REST_READONLY","SSC_Q7","","SSC - Q7 = LED Red -  QX_SSC_LED_Red_Q 7"
"Y42","FLAGS = REST_READONLY","SSC_Q8","","SSC - Q8 = LED Red Online -  QX_SSC_LED_Red_O nline_Q8"
"Y43","FLAGS = REST_READONLY","MPO_Q4","","MPO - Q4 = Motor M3 saw -  QX_MPO_M3_Saw_Q4"
"Y44","FLAGS = REST_READONLY","MPO_Q5","","MPO - Q5 = Motor M4 oven feeder retract -  QX_MPO_M4_OvenFe ederRetract_Q5"
"Y45","FLAGS = REST_READONLY","MPO_Q1","","MPO - Q1 = Motor M1 turn-table clockwise -  QX_MPO_M1_TurnTab leClockwise_Q1"
"Y46","FLAGS = REST_READONLY","MPO_Q2","","MPO - Q2 = Motor M1 turn-table counterclockwise -  QX_MPO_M1_TurnTab leCounterclockwise_Q2"
"Y47","FLAGS = REST_READONLY","MPO_Q3","","MPO - Q3 = Motor M2 conveyor belt forward -  QX_MPO_M2_Conveyo rBeltForward_Q3"
"Y48","FLAGS = REST_READONLY","HBW_Q1","","HBW - Q1 = Motor M1 conveyor belt forward -  QX_HBW_M1_Convey orBeltForward_Q1"
"Y49","FLAGS = REST_READONLY","HBW_Q2","","HBW - Q2 = Motor M1 conveyor belt backward -  QX_HBW_M1_Convey orBeltBackward_Q2"
"Y50","FLAGS = REST_READONLY","HBW_Q3","","HBW - Q3 = Motor M2 horizontal towards rack -  QX_HBW_M2_Horizont alTowardsRack_Q3"
"Y51","FLAGS = REST_READONLY","HBW_Q4","","HBW - Q4 = Motor M2 horizontal towards conveyor belt -  QX_HBW_M2_Horizont alTowardsConveyorBel t _Q4"
"Y52","FLAGS = REST_READONLY","MPO_Q6","","MPO - Q6 = Motor M4 oven feeder extend -  QX_MPO_M4_OvenFe ederExtend_Q6"
"Y53","FLAGS = REST_READONLY","MPO_Q7","","MPO - Q7 = Motor M5 vacuum towards oven -  QX_MPO_M5_Vacuum TowardsOven_Q7"
"Y80","FLAGS = REST_READONLY","HBW_PWM_M1","","QW_HBW_PWM_Con veyor Belt_M1"
"Y81","FLAGS = REST_READONLY","HBW_PWM_M2","","HBW = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti cal_ M3"
"Y82","FLAGS = REST_READONLY","HBW_PWM_M3","","HBW  = PWM Motor M3 vertical axis -  QW_HBW_PWM_Verti calA xis_M3"
"Y83","FLAGS = REST_READONLY","HBW_PWM_M4","","HBW  = PWM Motor M4 cantilever -  QW_HBW_PWM_Canti leve r_M4"
"Y88","FLAGS = REST_READONLY","VGR_PWM_M1","","VGR = PWM Motor M1 vertical axis -  QW_VGR_PWM_Vertic al_ M1"
"Y89","FLAGS = REST_READONLY","VGR_PWM_M2","","VGR = PWM Motor M2 horizontal axis -  QW_VGR_PWM_Horiz ontal _M2"
"Y90","FLAGS = REST_READONLY","VGR_PWM_M3","","VGR = PWM Motor M3 rotate axis -  QW_VGR_PWM_Rotat e_M 3"
"Y91","FLAGS = REST_READONLY","MPO_PWM_M5","","MPO = PWM Motor M5 turn-table -  QW_MPO_PWM_Vacu um_ M5"
"Y92","FLAGS = REST_READONLY","SSC_PWM_M1","","SSC = PWM Motor M1 vertical axis -  QW_SSC_PWM_Vertic al_ M1"
"Y93","FLAGS = REST_READONLY","SSC_PWM_M2","","SSC = PWM Motor M2 horizontal axis -  QW_SSC_PWM_Horiz ontal _M2"
"Y94","FLAGS = REST_READONLY","MPO_PWM_M1","","MPO = PWM Motor M1 turn-table -  QW_MPO_PWM_Turn Table _M1"
"WX0","FLAGS = REST_READONLY","SLD_A4","","SLD - A4 = Color sensor -  IW_SLD_ColorSensor_ A4"
"WX1","FLAGS = REST_READONLY","SSC_A1","","SSC - A1 = Color sensor -  IW_SSC_ColorSensor_ A1"
"C0","FLAGS = REST_READONLY","NOP","",""
"C1","FLAGS = REST_READONLY","CALL","",""
"C2","FLAGS = REST_READONLY","Puck_At_VGR","","HBW waiting for VGR  to take puck and reset bit"
"C3","FLAGS = REST_READONLY","Pallet_Empty","",""
"C6","FLAGS = REST_READONLY","ESTOP","",""
"C11","FLAGS = REST_READONLY","C11_Interlock","","Used to delay logic by one scan"
"C12","FLAGS = REST_READONLY","C12_Interlock_2","","Used to delay logic by one scan"
"C20","FLAGS = REST_READONLY","HBW_Has_Pallet","","True when carrying a pallet"
"C51","FLAGS = REST_READONLY","X_Direction","","True: Left False: Right"
"C52","FLAGS = REST_READONLY","Z_Direction","","True: Down False: Up"
"C60","FLAGS = REST_READONLY","Increment_Row","",""
"C61","FLAGS = REST_READONLY","Increment_Col","",""
"C80","FLAGS = REST_READONLY","Conveyor_Timeout","","Bit high when Conveyor Timeout timer active"
"C90","FLAGS = REST_READONLY","HBW_XY_PID_EN","","Enables PID control in HBW_Move_XZ"
"C101","FLAGS = REST_READONLY","HBW_T1_Send","Modbus MC101","Task to deliver a pallet to conveyor"
"C102","FLAGS = REST_READONLY","HBW_T2_Receive","Modbus MC102","Task to pickup a pallet from conveyor"
"C103","FLAGS = REST_READONLY","HBW_T3_Reset","Modbus MC103","Reinitialize and home all axises"
"C104","FLAGS = REST_READONLY","HBW_T4_Manual","Modbus MC104","Switch to manual mode"
"C110","FLAGS = REST_READONLY","HBW_Move_X_L","Modbus MC110","Move Horizontal Axis towards bay"
"C111","FLAGS = REST_READONLY","HBW_Move_X_R","Modbus MC111","Move Horizontal Axis towards Conveyor"
"C112","FLAGS = REST_READONLY","HBW_Move_Y_In","Modbus MC112","Move Cantilever In"
"C113","FLAGS = REST_READONLY","HBW_Move_Y_Out","Modbus MC113","Move Cantilever Out"
"C114","FLAGS = REST_READONLY","HBW_Move_Z_Up","Modbus MC114","Move Vertical Axis Up"
"C115","FLAGS = REST_READONLY","HBW_Move_Z_Down","Modbus MC115","Move Vertical Axis Down"
"C116","FLAGS = REST_READONLY","HBW_Conveyor_In","Modbus MC116","Move Conveyor In"
"C117","FLAGS = REST_READONLY","HBW_Conveyor_Out","Modbus MC117","Move Conveyor Out"
"C130","FLAGS = REST_READONLY","HBW_Status_Ready","Modbus MC130","On when ready for a task"
"C133","FLAGS = REST_READONLY","HBW_Mov_Conveyor","Modbus MC133","Status Conveyor Moving"
"C134","FLAGS = REST_READONLY","HBW_Moving_X","Modbus MC134","Status GantryMovingX"
"C135","FLAGS = REST_READONLY","HBW_Moving_Y","Modbus MC135","Status GantryMovingY"
"C136","FLAGS = REST_READONLY","HBW_Moving_Z","Modbus MC136","Status GantryMovingZ"
"C138","FLAGS = REST_READONLY","HBW_Status_Y_Pos","Modbus MC138","Current Y position"
"C141","FLAGS = REST_READONLY","HBW_Target_Y_Pos","Modbus MC141","Target Y position"
"C150","FLAGS = REST_READONLY","HBW_MoveComplete","","HBW_Move_XZ completion interlock."
"C180","FLAGS = REST_READONLY","HBW_Fault","Modbus MC180","Status in Fault State"
"C182","FLAGS = REST_READONLY","Fault_X_Target","","Active when X target out of range"
"C183","FLAGS = REST_READONLY","Fault_Z_target","","Active when Z target out of range"
"C307","FLAGS = REST_READONLY","Last_Puck","",""
"C400","FLAGS = REST_READONLY","VGR_T0","",""
"C410","FLAGS = REST_READONLY","VGR_T1","",""
"C420","FLAGS = REST_READONLY","VGR_T2","",""
"C430","FLAGS = REST_READONLY","VGR_T3","",""
"C440","FLAGS = REST_READONLY","VGR_T4","",""
"C500","FLAGS = REST_READONLY","VGR_Man_Control","",""
"C799","FLAGS = REST_READONLY","VGR_RESET","",""
"V0","FLAGS = REST_READONLY","ROW_1","","Z Value"
"V1","FLAGS = REST_READONLY","ROW_2","","ZValue"
"V2","FLAGS = REST_READONLY","ROW_3","","Z Value"
"V3","FLAGS = REST_READONLY","COLUMN_1","",""
"V4","FLAGS = REST_READONLY","COLUMN_2","",""
"V5","FLAGS = REST_READONLY","COLUMN_3","",""
"V105","FLAGS = REST_READONLY","HBW_Task_X_slot","Modbus MHR105","Value for slot X coord"
"V106","FLAGS = REST_READONLY","HBW_Task_Y_slot","Modbus MHR106","Value for slot y coord"
"V118","FLAGS = REST_READONLY","HBW_PWM_Set_X","Modbus MHR118","Set Horizontal Axis PWM Duty Cycle %"
"V119","FLAGS = REST_READONLY","HBW_PWM_Set_Y","Modbus MHR119","Set Cantilever Axis PWM Duty Cycle %"
"V120","FLAGS = REST_READONLY","HBW_PWM_Set_Z","Modbus MHR120","Set Vertical Axis PWM Duty cycle %"
"V131","FLAGS = REST_READONLY","HBW_Cur_Progress","Modbus MHR131","0 to 100 percent job completion"
"V132","FLAGS = REST_READONLY","HBW_Cur_Stage","Modbus MHR132","Current stage number"
"V137","FLAGS = REST_READONLY","HBW_Status_X_Pos","Modbus MHR137","Current X encoder position"
"V139","FLAGS = REST_READONLY","HBW_Status_Z_Pos","Modbus MHR139","Current Z encoder position"
"V140","FLAGS = REST_READONLY","HBW_Target_X_Pos","Modbus MHR140","Target X encoder position"
"V142","FLAGS = REST_READONLY","HBW_Target_Z_Pos","Modbus MHR142","Target Z encoder position"
"V181","FLAGS = REST_READONLY","HBW_Fault_code","Modbus MHR181","Current Fault code"
"V801","FLAGS = REST_READONLY","VGR_Fault_Code","",""
"N810","FLAGS = REST_READONLY","VGR_Rot_Target","",""
"N811","FLAGS = REST_READONLY","VGR_X_Target","",""
"N812","FLAGS = REST_READONLY","VGR_Y_Target","",""
"D0","FLAGS = REST_READONLY","MC","",""
"D1","FLAGS = REST_READONLY","Zminus300","",""
"D2","FLAGS = REST_READONLY","Zvalue","",""
"D3","FLAGS = REST_READONLY","Zplus300","",""
"D4","FLAGS = REST_READONLY","Col1","",""
"D5","FLAGS = REST_READONLY","Col2","",""
"D6","FLAGS = REST_READONLY","Col3","",""
"D7","FLAGS = REST_READONLY","Row3","",""
"D8","FLAGS = REST_READONLY","Row2","",""
"D9","FLAGS = REST_READONLY","Row1","",""
"D32","FLAGS = REST_READONLY","Curr_Z","",""
"D33","FLAGS = REST_READONLY","Below_Cur_Z_150","",""
"D140","FLAGS = REST_READONLY","X_Start_Position","","Distance to target"
"D142","FLAGS = REST_READONLY","Y_Start_Position","","Distance to target"
"D143","FLAGS = REST_READONLY","HBW_PWM_Cur_X","","PWM value for X for XZ movement task"
"D144","FLAGS = REST_READONLY","HBW_PWM_Cur_Z","","PWM value for Z for XZ movement task"
"T3","FLAGS = REST_READONLY","T_HBW_S6","",""
"T4","FLAGS = REST_READONLY","T_Conveyor_Timer","","Used to detect conveyor faults"
"CT4","FLAGS = REST_READONLY","Row","",""
"CT5","FLAGS = REST_READONLY","Column","",""
"HBW_Program.S10","FLAGS = REST_READONLY","J0","",""
"US0","FLAGS =","_CP_Strogram_A","","CP_State_Program"
"US1","FLAGS =","_VGR_Movement","","VGR_Movement"
"US2","FLAGS =","_SSC_Check_InOut","","SSC_Check_InOut"
"UB0","FLAGS =","_VGR_MisScan_A","","VGR_Movement.Done ThisScan"
#END

